

//1. EXTREMELY OVER-NESTED/////
//
// Extremely Over-Nested
// Create a function that returns the original value from a matrix with too many sub-arrays.
//
//
// deNest([[[[[[[[[[[[3]]]]]]]]]]]]) ➞ 3
//
// deNest([[[[[[[true]]]]]]]) ➞ true
//
// deNest([[[[[[[[[[[[[[[[["edabit"]]]]]]]]]]]]]]]]]) ➞ "edabit"
// Notes
// You only need to retrieve one element.


function deNest(arr) {

}







////LINKS////

//
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
//
//
//
//     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


//////END OF LINKS//////////





//////////////////2. CHOCOLATE DILEMMA////////////////

// Chocolate Dilemma
// Two sisters are eating chocolate, whose pieces are represented as subarrays of [l x w].
//
// Write a function that returns true if the total area of chocolate is the same for each sister.
//
//     To illustrate:
//
//     testFairness([[4, 3], [2, 4], [1, 2]],
//         [[6, 2], [4, 2], [1, 1], [1, 1]])
// ➞ true

// Agatha's pieces: [4, 3], [2, 4], [1, 2]
// Bertha's pieces: [6, 2], [4, 2], [1, 1], [1, 1]

// Total area of Agatha's chocolate
// 4x3 + 2x4 + 1x2 = 12 + 8 + 2 = 22

// Total area of Bertha's chocolate is:
// 6x2 + 4x2 + 1x1 + 1x1 = 12 + 8 + 1 + 1 = 22
// Examples
// testFairness([[1, 2], [2, 1]], [[2, 2]]) ➞ true
//
// testFairness([[1, 2], [2, 1]], [[2, 2], [4, 4]]) ➞ false
//
// testFairness([[2, 2], [2, 2], [2, 2], [2, 2]], [[4, 4]]) ➞ true
//
// testFairness([[1, 5], [6, 3], [1, 1]], [[7, 1], [2, 2], [1, 1]]) ➞ false
// // Notes


function testFairness(agatha, bertha){


}

//////////////////////// HARVEST FESTIVAL /////////////////

// Harvest Festival
// You have cultivated a plant, and after three long months, the time has come to reap the fruits (or the flowers, in this case) of your hard work. During the growth phase, you added water and fertilizer, and kept a constant temperature. It's time to check how much the plant has grown!
//
// A plant is represented horizontally, from the base to the left, to the end to the right:
//
//     ---@---@---@
//         The stem is made of hyphens, and the flowers are represented by symbols. A plant always starts with the stem, and always ends with flowers.
//
//     The four given parameters are:
//
//     seed (string) determines the type of flowers generated by the plant.
// water (integer) each unit of water extends the portion of stem between the flowers, and gives the total number of segments (stem + flowers) of the plant.
// fert (integer) each unit of fertilizer increases the amount of flowers, grouped in clusters.
// temp (integer) if the temperature recorded is between 20°C and 30°C (bounds included) the plant grows normally, otherwise all the flowers die, except for a single survivor at the end of the stem.
//     Given the above parameters, implement a function that returns a string representing the plant (see the examples below for a better visualization).
//
// Examples
// plant("@", 3, 3, 25) ➞ "---@@@---@@@---@@@"
// // Water gives the length of the stem portions between flowers.
// // Water gives the total number of segments.
// // Fertilizer gives the length of flowers clusters.
// // In this case the temperature is in the acceptable range 20°C | 30°C
//
// plant("#", 1, 5, 30) ➞ "-#####"
//
// plant("&", 5, 1, 20) ➞ "-----&-----&-----&-----&-----&"
//
// plant("§", 3, 3, 15) ➞ "---------§"
// // The temperature out of range make all flowers die, except the last one.
// // The stem is not affected by temperature.
// Notes
// All given cases will have valid parameters for water and fert, you have to only check that temp is in the "safe" range (20°C|30°C).